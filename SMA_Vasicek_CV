import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import TimeSeriesSplit
from sklearn.preprocessing import StandardScaler


data = "fed-funds-rate-historical-chart.csv"
df = pd.read_csv(data, skiprows=16, names=['date', 'value'])     # skip first 16 rows because there's no data
df['date'] = pd.to_datetime(df['date'], errors='coerce')

all_dates = pd.date_range(start="1994-07-01", end="2024-11-01")
complete_df = pd.DataFrame({'date': all_dates})
merged_df = pd.merge(complete_df, df, on='date', how='left')

window_size = 7
merged_df['SMA_filled'] = merged_df['value'].fillna(merged_df['value'].rolling(window=window_size, min_periods=1).mean())
merged_df = merged_df[['date', 'SMA_filled']]
merged_df.set_index('date', inplace=True)

monthly_df = merged_df.resample('ME').mean()


rates = merged_df['SMA_filled']

rates = monthly_df['SMA_filled']

# normalize
scaler = StandardScaler()
rates = pd.Series(scaler.fit_transform(rates.values.reshape(-1, 1)).flatten(), index=rates.index)

dt = 1 / 252

# Vasicek
def vasicek_log_likelihood(params, rates, dt):
    kappa, theta, sigma = params
    n = len(rates)
    if kappa <= 0 or sigma <= 0:
        return np.inf  # Penalize invalid parameters
    log_likelihood = 0
    for i in range(1, n):
        mu = rates[i - 1] + kappa * (theta - rates[i - 1]) * dt
        variance = sigma**2 * dt
        likelihood = -0.5 * np.log(2 * np.pi * variance) - 0.5 * ((rates[i] - mu)**2 / variance)
        log_likelihood += likelihood
    return -log_likelihood

def simulate_vasicek(r0, kappa, theta, sigma, n, dt):
    rates = [r0]
    for _ in range(1, n):
        dr = kappa * (theta - rates[-1]) * dt + sigma * np.sqrt(dt) * np.random.normal()
        rates.append(rates[-1] + dr)
    return np.array(rates)

# Cross-Validation
tscv = TimeSeriesSplit(n_splits=5)

# Initialize
train_mse_list = []
test_mse_list = []
train_mae_list = []
test_mae_list = []
train_rmse_list = []
test_rmse_list = []
train_r2_list = []
test_r2_list = []

split_indices = list(tscv.split(rates))

for train_index, test_index in tscv.split(rates):
    train_data, test_data = rates.iloc[train_index], rates.iloc[test_index]

    initial_params = [0.1, 0.5, 0.02]
    result = minimize(
        vasicek_log_likelihood, 
        initial_params, 
        args=(train_data, dt), 
        bounds=[(1e-6, None), (1e-6, 1), (1e-6, None)]
    )
    kappa, theta, sigma = result.x

    train_simulated = simulate_vasicek(train_data.iloc[0], kappa, theta, sigma, len(train_data), dt)
    test_simulated = simulate_vasicek(test_data.iloc[0], kappa, theta, sigma, len(test_data), dt)

    # Evaluate metrics for training data
    train_mse = mean_squared_error(train_data, train_simulated)
    train_mae = mean_absolute_error(train_data, train_simulated)
    train_rmse = np.sqrt(train_mse)
    train_r2 = r2_score(train_data, train_simulated)

    # Evaluate metrics for testing data
    test_mse = mean_squared_error(test_data, test_simulated)
    test_mae = mean_absolute_error(test_data, test_simulated)
    test_rmse = np.sqrt(test_mse)
    test_r2 = r2_score(test_data, test_simulated)

    train_mse_list.append(train_mse)
    test_mse_list.append(test_mse)
    train_mae_list.append(train_mae)
    test_mae_list.append(test_mae)
    train_rmse_list.append(train_rmse)
    test_rmse_list.append(test_rmse)
    train_r2_list.append(train_r2)
    test_r2_list.append(test_r2)

# Print average metrics across all folds
print("\nAverage Training Metrics:")
print(f"MSE: {np.mean(train_mse_list)}")
print(f"MAE: {np.mean(train_mae_list)}")
print(f"RMSE: {np.mean(train_rmse_list)}")
print(f"R^2: {np.mean(train_r2_list)}")

print("\nAverage Testing Metrics:")
print(f"MSE: {np.mean(test_mse_list)}")
print(f"MAE: {np.mean(test_mae_list)}")
print(f"RMSE: {np.mean(test_rmse_list)}")
print(f"R^2: {np.mean(test_r2_list)}")

# Plotting the errors for each fold
plt.figure(figsize=(12, 6))
plt.plot(range(1, len(split_indices) + 1), test_mse_list, label="Test MSE per fold", color="orange", marker='o')
plt.plot(range(1, len(split_indices) + 1), train_mse_list, label="Train MSE per fold", color="blue", marker='o')
plt.xlabel("Fold")
plt.ylabel("MSE")
plt.title("MSE for each Fold (Cross-Validation)")
plt.legend()
plt.show()
